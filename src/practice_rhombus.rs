#[test]
fn test_01() {
    const SIZE: u8 = 9; // Розмір ромба
    let half = SIZE / 2; // Піврозмір для обчислень симетрії

    // Замикання для обчислення відображеної координати
    let mirror = |a: u8| -> u8 { SIZE - 1 - a };

    // Ітерація по рядках (y) ромба
    for y in 0..SIZE {
        // Ітерація по стовпчиках (x) ромба
        for x in 0..SIZE {
            // Обчислюємо мінімальні координати для забезпечення симетрії
            let min_x = x.min(mirror(x));
            let min_y = y.min(mirror(y));

            // Умова для визначення, чи є точка всередині ромба
            let condition = min_x + min_y < half;

            // Визначаємо, який символ виводити: пробіл або зірочку
            let c = if condition { " " } else { "*" };

            // Виводимо символ без переведення рядка
            print!("{}", c);
        }
        // Переводимо курсор на новий рядок після завершення рядка символів
        println!();
    }
}

#[test]
fn test_02() {
    const SIZE: u8 = 9; // Розмір ромба
    let half = SIZE / 2; // Піврозмір для обчислень симетрії

    // Замикання для обчислення відображеної координати
    let mirror = |a: u8| -> u8 { SIZE - 1 - a };

    // Загальна кількість позицій (SIZE * SIZE)
    let total = (SIZE as usize) * (SIZE as usize);

    for index in 0..total {
        // Обчислюємо координати x та y з одновимірного індексу
        let x = (index as u8) % SIZE;
        let y = (index as u8) / SIZE;

        // Обчислюємо мінімальні координати для забезпечення симетрії
        let min_x = x.min(mirror(x));
        let min_y = y.min(mirror(y));

        // Умова для визначення, чи є точка всередині ромба
        let condition = min_x + min_y < half;

        // Визначаємо, який символ виводити: пробіл або зірочку
        let c = if condition { " " } else { "*" };

        // Виводимо символ без переведення рядка
        print!("{}", c);

        // Перевіряємо, чи досягли кінця рядка, щоб перевести рядок
        if x == SIZE - 1 {
            println!();
        }
    }
}



